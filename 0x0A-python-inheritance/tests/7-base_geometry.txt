=============================
How to use 7-base_geometry.py
=============================

This is to test the ``integer_validator`` method in the BaseGeometry class

Usage
=====

``integer_validator`` checks if the arguments passed to it are ints

::

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("size", 9)

Ints less than or equal to 0 should raise a ValueError

::

	>>> bg.integer_validator("size", 0)
	Traceback (most recent call last):
	...
	ValueError: size must be greater than 0

::

	>>> bg.integer_validator("size", -9)
	Traceback (most recent call last):
	...
	ValueError: size must be greater than 0

Non-ints should raise a TypeError

::

	>>> bg.integer_validator("size", True)
	Traceback (most recent call last):
        ...
	TypeError: size must be an integer

::

	>>> bg.integer_validator("size", {1:"Yes", 2:"No", 3:"Maybe"})
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer

::

	>>> bg.integer_validator("size", (1,5,7))
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer

::

	>>> bg.integer_validator("size", "I don't know")
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer

When no args are passed a TypeError is raised

::

	>>> bg.integer_validator()
	Traceback (most recent call last):
        ...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Similarly for 1 arg and too many args respectively

::

	>>> bg.integer_validator("size")
	Traceback (most recent call last):
        ...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

::

	>>> bg.integer_validator("size", 4, 5)
	Traceback (most recent call last):
        ...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given
